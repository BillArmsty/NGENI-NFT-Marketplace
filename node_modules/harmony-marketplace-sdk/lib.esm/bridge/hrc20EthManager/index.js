var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EthBaseContract } from '../../contracts';
import ABI from './abi';
export class HRC20EthManager extends EthBaseContract {
    constructor(address, signer) {
        super(address, ABI, signer);
    }
    addToken(tokenManager, hmyTokenAddr, name, symbol, decimals, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('addToken', [tokenManager, hmyTokenAddr, name, symbol, decimals], txOptions);
        });
    }
    removeToken(tokenManager, hmyTokenAddr, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('removeToken', [tokenManager, hmyTokenAddr], txOptions);
        });
    }
    burnToken(ethToken, amount, recipient, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('burnToken', [ethToken, amount, recipient], txOptions);
        });
    }
    mintToken(ethToken, amount, recipient, receiptId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('mintToken', [ethToken, amount, recipient, receiptId], txOptions);
        });
    }
    mappings(hrc20Addr) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('mappings', [hrc20Addr]);
        });
    }
}
//# sourceMappingURL=index.js.map