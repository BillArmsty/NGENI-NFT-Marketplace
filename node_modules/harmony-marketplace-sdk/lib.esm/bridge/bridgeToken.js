var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { VoidSigner } from '@ethersproject/abstract-signer';
import { BridgeType, DEFAULT_TX_OPTIONS, DEVNET_MULTISIG_WALLET, HARMONY_RPC_SHARD_0_DEVNET_URL, HARMONY_RPC_SHARD_0_URL, MAINNET_MULTISIG_WALLET, NetworkInfo, } from '../constants';
import { Key } from '../wallets';
export class BridgeToken {
    constructor(hmyOwnerWallet, ethOwnerWallet, network = NetworkInfo.MAINNET) {
        this.network = network;
        this.isMainnet = this.network === NetworkInfo.MAINNET;
        if (this.isMainnet) {
            this.ethMasterWallet = new VoidSigner(MAINNET_MULTISIG_WALLET);
            this.hmyMasterWallet = new Key(HARMONY_RPC_SHARD_0_URL);
        }
        else {
            this.ethMasterWallet = new VoidSigner(DEVNET_MULTISIG_WALLET);
            this.hmyMasterWallet = new Key(HARMONY_RPC_SHARD_0_DEVNET_URL);
        }
        if (!ethOwnerWallet.provider) {
            throw new Error('Ethereum signer should have a rpc provider set.');
        }
        this.ethMasterWallet = this.ethMasterWallet.connect(ethOwnerWallet.provider);
        this.hmyMasterWallet.setSigner(MAINNET_MULTISIG_WALLET);
        this.hmyOwnerWallet = hmyOwnerWallet;
        this.ethOwnerWallet = ethOwnerWallet;
    }
    sendToken(type, sender, recipient, token, tokenInfo, txOptions = DEFAULT_TX_OPTIONS) {
        return __awaiter(this, void 0, void 0, function* () {
            if (type === BridgeType.ETH_TO_HMY) {
                return this.ethToHmy(sender, recipient, token, tokenInfo);
            }
            else {
                return this.hmyToEth(sender, recipient, token, tokenInfo, txOptions);
            }
        });
    }
}
//# sourceMappingURL=bridgeToken.js.map