var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EthBaseContract } from '../../contracts';
import ABI from './abi';
export class HRC721EthManager extends EthBaseContract {
    constructor(address, signer) {
        super(address, ABI, signer);
    }
    addToken(tokenManager, ethTokenAddr, name, symbol, tokenURI, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('addToken', [tokenManager, ethTokenAddr, name, symbol, tokenURI], txOptions);
        });
    }
    removeToken(tokenManager, ethTokenAddr, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('removeToken', [tokenManager, ethTokenAddr], txOptions);
        });
    }
    burnToken(oneToken, tokenId, recipient, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('burnToken', [oneToken, tokenId, recipient], txOptions);
        });
    }
    burnTokens(oneToken, tokenIds, recipient, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('burnTokens', [oneToken, tokenIds, recipient], txOptions);
        });
    }
    mintToken(oneToken, tokenId, recipient, receiptId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('mintToken', [oneToken, tokenId, recipient, receiptId], txOptions);
        });
    }
    mintTokens(oneToken, tokenIds, recipient, receiptId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('mintTokens', [oneToken, tokenIds, recipient, receiptId], txOptions);
        });
    }
    mappings(hrc721Addr) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('mappings', [hrc721Addr]);
        });
    }
}
//# sourceMappingURL=index.js.map