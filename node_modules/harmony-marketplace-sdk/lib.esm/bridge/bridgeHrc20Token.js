var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { TxStatus } from '@harmony-js/transaction';
import { hexToNumber } from '@harmony-js/utils';
import BN from 'bn.js';
import { AddressZero, DEFAULT_TX_OPTIONS, DEVNET_HRC20_CONTRACTS_ADDRESSES, HARMONY_RPC_WS, MAINNET_HRC20_CONTRACTS_ADDRESSES, } from '../constants';
import { waitForNewBlock } from '../utils';
import { BridgeToken } from './bridgeToken';
import { BridgedHRC20Token } from './bridgedHrc20Token';
import { HRC20EthManager } from './hrc20EthManager';
import { HRC20HmyManager } from './hrc20HmyManager';
import { HRC20TokenManager } from './hrc20TokenManager';
export class BridgeHRC20Token extends BridgeToken {
    getContractAddresses() {
        return this.isMainnet ? MAINNET_HRC20_CONTRACTS_ADDRESSES : DEVNET_HRC20_CONTRACTS_ADDRESSES;
    }
    getBridgedTokenAddress(token, txOptions = DEFAULT_TX_OPTIONS) {
        return __awaiter(this, void 0, void 0, function* () {
            const { ethManagerAddress, tokenManagerAddress } = this.getContractAddresses();
            const ethManager = new HRC20EthManager(ethManagerAddress, this.ethOwnerWallet);
            const tokenManager = new HRC20TokenManager(tokenManagerAddress, this.ethMasterWallet);
            let erc20Addr = undefined;
            try {
                erc20Addr = yield ethManager.mappings(token.address);
            }
            catch (err) { }
            if (!erc20Addr || erc20Addr === AddressZero) {
                const [name, symbol, decimals] = yield Promise.all([
                    token.name(txOptions),
                    token.symbol(txOptions),
                    token.decimals(txOptions),
                ]);
                yield ethManager.addToken(tokenManager.address, token.address, name, symbol, decimals);
                erc20Addr = yield ethManager.mappings(token.address);
            }
            return erc20Addr;
        });
    }
    ethToHmy(sender, recipient, token, tokenInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const { ethManagerAddress } = this.getContractAddresses();
            const ethManager = new HRC20EthManager(ethManagerAddress, this.ethOwnerWallet);
            const erc20Address = yield ethManager.mappings(token.address);
            const erc20 = new BridgedHRC20Token(erc20Address, this.ethOwnerWallet);
            const { amount } = tokenInfo;
            if (!amount) {
                throw Error('Error in tokenInfo, amount cannot be undefined for HRC20');
            }
            const balance = yield erc20.balanceOf(sender);
            if (balance.lt(amount)) {
                throw Error('Insufficient funds');
            }
            const approveTx = yield erc20.approve(ethManager.address, amount);
            if ((approveTx === null || approveTx === void 0 ? void 0 : approveTx.status) !== 1) {
                throw new Error(`Failed to approve erc20: ${approveTx === null || approveTx === void 0 ? void 0 : approveTx.transactionHash}`);
            }
            const burnTx = yield ethManager.burnToken(erc20Address, amount, recipient);
            if ((burnTx === null || burnTx === void 0 ? void 0 : burnTx.status) !== 1) {
                throw new Error(`Failed to approve erc20: ${burnTx === null || burnTx === void 0 ? void 0 : burnTx.transactionHash}`);
            }
            return { addr: token.address, receiptId: burnTx === null || burnTx === void 0 ? void 0 : burnTx.transactionHash };
        });
    }
    hmyToEth(sender, recipient, token, tokenInfo, txOptions = DEFAULT_TX_OPTIONS) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { amount, ws = HARMONY_RPC_WS, waitingFor = 12 } = tokenInfo;
            if (!amount) {
                throw Error('Error in tokenInfo, amount cannot be undefined for HRC20');
            }
            const balance = yield token.balanceOf(sender, txOptions);
            if (balance.lt(new BN(amount))) {
                throw new Error(`Insufficient funds. Balance: ${balance}. Amount: ${amount}`);
            }
            const { hmyManagerAddress } = this.getContractAddresses();
            const hmyManager = new HRC20HmyManager(hmyManagerAddress, this.hmyOwnerWallet);
            const erc20Addr = yield this.getBridgedTokenAddress(token, txOptions);
            const approveTx = yield token.approve(hmyManager.address, amount, txOptions);
            if ((approveTx === null || approveTx === void 0 ? void 0 : approveTx.txStatus) !== TxStatus.CONFIRMED) {
                throw new Error(`Failed to approve manager: ${approveTx === null || approveTx === void 0 ? void 0 : approveTx.id}`);
            }
            const lockTokenTx = yield hmyManager.lockToken(token.address, amount, recipient, txOptions);
            if ((lockTokenTx === null || lockTokenTx === void 0 ? void 0 : lockTokenTx.txStatus) !== TxStatus.CONFIRMED) {
                throw new Error(`Failed to lock tokens: ${lockTokenTx === null || lockTokenTx === void 0 ? void 0 : lockTokenTx.id}`);
            }
            const expectedBlockNumber = parseInt(hexToNumber((_b = (_a = lockTokenTx === null || lockTokenTx === void 0 ? void 0 : lockTokenTx.receipt) === null || _a === void 0 ? void 0 : _a.blockNumber) !== null && _b !== void 0 ? _b : ''), 10) + waitingFor;
            yield waitForNewBlock(expectedBlockNumber, ws, token.messenger.chainType, token.messenger.chainId);
            return { addr: erc20Addr, receiptId: lockTokenTx === null || lockTokenTx === void 0 ? void 0 : lockTokenTx.id };
        });
    }
}
//# sourceMappingURL=bridgeHrc20Token.js.map