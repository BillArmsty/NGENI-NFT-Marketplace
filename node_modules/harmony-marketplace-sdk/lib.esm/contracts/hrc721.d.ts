import { Transaction } from '@harmony-js/transaction';
import BN from 'bn.js';
import { BNish, ITransactionOptions } from '../interfaces';
import { BaseToken } from './baseToken';
export declare class HRC721 extends BaseToken {
    balanceOf(address: string, txOptions?: ITransactionOptions): Promise<BN>;
    ownerOf(tokenId: BNish, txOptions?: ITransactionOptions): Promise<string>;
    safeTransferFrom(from: string, to: string, tokenId: BNish, data?: any, txOptions?: ITransactionOptions): Promise<Transaction>;
    transferFrom(from: string, to: string, tokenId: BNish, txOptions?: ITransactionOptions): Promise<Transaction>;
    approve(to: string, tokenId: BNish, txOptions?: ITransactionOptions): Promise<Transaction>;
    getApproved(tokenId: BNish, txOptions?: ITransactionOptions): Promise<string>;
    setApprovalForAll(addressOperator: string, approved: boolean, txOptions?: ITransactionOptions): Promise<Transaction>;
    isApprovedForAll(owner: string, operator: string, txOptions?: ITransactionOptions): Promise<boolean>;
    totalSupply(txOptions?: ITransactionOptions): Promise<BN>;
    tokenURI(tokenId: BNish, txOptions?: ITransactionOptions): Promise<string>;
    symbol(txOptions?: ITransactionOptions): Promise<string>;
    name(txOptions?: ITransactionOptions): Promise<string>;
    mint(account: string, tokenId: BNish, txOptions?: ITransactionOptions): Promise<Transaction>;
    safeMint(to: string, tokenId: BNish, txOptions?: ITransactionOptions): Promise<Transaction>;
    burn(tokenId: BNish, txOptions?: ITransactionOptions): Promise<Transaction>;
}
//# sourceMappingURL=hrc721.d.ts.map