var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AddressZero } from '../constants';
import { isBNish } from '../utils';
import { BaseContract, ContractError } from './baseContract';
export class BaseToken extends BaseContract {
    getBalance(address, id, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!address || address === AddressZero) {
                throw new ContractError('Invalid address provided', '_getBalance');
            }
            const args = [address];
            if (isBNish(id)) {
                args.push(id);
            }
            return this.call('balanceOf', args, txOptions);
        });
    }
}
//# sourceMappingURL=baseToken.js.map