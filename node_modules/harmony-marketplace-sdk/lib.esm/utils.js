import { isArrayish, isHexString } from '@harmony-js/crypto';
import { Messenger, WSProvider, NewHeaders } from '@harmony-js/network';
import { hexToNumber } from '@harmony-js/utils';
import BN from 'bn.js';
export function isBNish(value) {
    return (value != null &&
        (BN.isBN(value) ||
            (typeof value === 'number' && value % 1 === 0) ||
            (typeof value === 'string' && !!value.match(/^-?[0-9]+$/)) ||
            isHexString(value) ||
            typeof value === 'bigint' ||
            isArrayish(value)));
}
export function waitForNewBlock(expectedBlockNumber, rpc, chainType, chainId) {
    const wsMessenger = new Messenger(new WSProvider(rpc), chainType, chainId);
    const newBlockSubscription = new NewHeaders(wsMessenger);
    return new Promise((res) => {
        newBlockSubscription.on('data', (data) => {
            const blockNumber = parseInt(hexToNumber(data.params.result.number), 10);
            if (blockNumber <= expectedBlockNumber) {
                console.log(`Currently at block ${blockNumber}, waiting for block ${expectedBlockNumber} to be confirmed`);
            }
            else {
                res();
            }
        });
    });
}
//# sourceMappingURL=utils.js.map