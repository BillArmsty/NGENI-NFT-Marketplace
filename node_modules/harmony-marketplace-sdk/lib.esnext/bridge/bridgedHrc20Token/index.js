"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgedHRC20Token = void 0;
const contracts_1 = require("../../contracts");
const abi_1 = __importDefault(require("./abi"));
class BridgedHRC20Token extends contracts_1.EthBaseContract {
    constructor(address, signer) {
        super(address, abi_1.default, signer);
    }
    totalSupply() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('totalSupply');
        });
    }
    balanceOf(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('balanceOf', [address]);
        });
    }
    transfer(to, amount, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('transfer', [to, amount], txOptions);
        });
    }
    allowance(owner, spender) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('allowance', [owner, spender]);
        });
    }
    approve(spender, amount, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('approve', [spender, amount], txOptions);
        });
    }
    transferFrom(from, to, amount, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.write('transferFrom', [from, to, amount], txOptions);
        });
    }
    symbol() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('symbol');
        });
    }
    name() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('name');
        });
    }
    decimals() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.read('decimals');
        });
    }
}
exports.BridgedHRC20Token = BridgedHRC20Token;
//# sourceMappingURL=index.js.map