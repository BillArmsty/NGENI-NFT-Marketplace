"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HRC20 = void 0;
const baseToken_1 = require("./baseToken");
class HRC20 extends baseToken_1.BaseToken {
    totalSupply(txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('totalSupply', [], txOptions);
        });
    }
    balanceOf(address, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getBalance(address, undefined, txOptions);
        });
    }
    transfer(to, amount, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('transfer', [to, amount], txOptions);
        });
    }
    allowance(owner, spender, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('allowance', [owner, spender], txOptions);
        });
    }
    approve(spender, amount, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('approve', [spender, amount], txOptions);
        });
    }
    transferFrom(from, to, amount, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('transferFrom', [from, to, amount], txOptions);
        });
    }
    symbol(txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('symbol', [], txOptions);
        });
    }
    name(txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('name', [], txOptions);
        });
    }
    decimals(txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('decimals', [], txOptions);
        });
    }
    mint(account, amount, txOptions) {
        return this.send('mint', [account, amount], txOptions);
    }
    burn(amount, txOptions) {
        return this.send('burn', [amount], txOptions);
    }
    burnFrom(account, amount, txOptions) {
        return this.send('burnFrom', [account, amount], txOptions);
    }
}
exports.HRC20 = HRC20;
//# sourceMappingURL=hrc20.js.map