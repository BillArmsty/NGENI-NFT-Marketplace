"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HRC721 = void 0;
const constants_1 = require("../constants");
const Utils = __importStar(require("../utils"));
const baseContract_1 = require("./baseContract");
const baseToken_1 = require("./baseToken");
class HRC721 extends baseToken_1.BaseToken {
    balanceOf(address, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getBalance(address, undefined, txOptions);
        });
    }
    ownerOf(tokenId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Utils.isBNish(tokenId)) {
                throw new baseContract_1.ContractError('You must provide a tokenId', 'ownerOf');
            }
            const address = yield this.call('ownerOf', [tokenId], txOptions);
            return this.sanitizeAddress(address);
        });
    }
    safeTransferFrom(from, to, tokenId, data, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [from, to, tokenId];
            if (data) {
                args.push(data);
            }
            return this.send('safeTransferFrom', args, txOptions);
        });
    }
    transferFrom(from, to, tokenId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('transferFrom', [from, to, tokenId], txOptions);
        });
    }
    approve(to, tokenId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('approve', [to, tokenId], txOptions);
        });
    }
    getApproved(tokenId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Utils.isBNish(tokenId)) {
                throw new baseContract_1.ContractError('You must provide a tokenId', 'getApproved');
            }
            const address = yield this.call('getApproved', [tokenId], txOptions);
            return this.sanitizeAddress(address);
        });
    }
    setApprovalForAll(addressOperator, approved, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!addressOperator) {
                throw new Error('You must provide an addressOperator');
            }
            return this.send('setApprovalForAll', [addressOperator, approved], txOptions);
        });
    }
    isApprovedForAll(owner, operator, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!owner || owner === constants_1.AddressZero) {
                throw new baseContract_1.ContractError('Invalid owner provided', 'isApprovedForAll');
            }
            if (!operator || operator === constants_1.AddressZero) {
                throw new baseContract_1.ContractError('Invalid operator provided', 'isApprovedForAll');
            }
            return this.call('isApprovedForAll', [owner, operator], txOptions);
        });
    }
    totalSupply(txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('totalSupply', [], txOptions);
        });
    }
    tokenURI(tokenId, txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Utils.isBNish(tokenId)) {
                throw new baseContract_1.ContractError('You must provide a tokenId', 'tokenURI');
            }
            return this.call('tokenURI', [tokenId], txOptions);
        });
    }
    symbol(txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('symbol', [], txOptions);
        });
    }
    name(txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('name', [], txOptions);
        });
    }
    mint(account, tokenId, txOptions) {
        return this.send('mint', [account, tokenId], txOptions);
    }
    safeMint(to, tokenId, txOptions) {
        return this.send('safeMint', [to, tokenId], txOptions);
    }
    burn(tokenId, txOptions) {
        return this.send('burn', [tokenId], txOptions);
    }
}
exports.HRC721 = HRC721;
//# sourceMappingURL=hrc721.js.map