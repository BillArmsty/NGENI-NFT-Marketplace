"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthBaseContract = void 0;
const bignumber_1 = require("@ethersproject/bignumber");
const contracts_1 = require("@ethersproject/contracts");
const units_1 = require("@ethersproject/units");
class EthBaseContract {
    constructor(address, abi, signerOrProvider) {
        this._contract = new contracts_1.Contract(address, abi, signerOrProvider);
        this.address = this._contract.address;
    }
    getGasLimit(methodName, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let gasEstimate;
            try {
                gasEstimate = yield this._contract.estimateGas[methodName](...args);
            }
            catch (gasError) {
                try {
                    const errorResult = yield this._contract.callStatic[methodName](...args);
                    throw new Error(`Unexpected successful call after failed estimate gas. Gas error: ${gasError.message}, Error: ${errorResult.message}`);
                }
                catch (callStaticError) {
                    throw new Error(`Unexpected issue with estimating the gas, ${callStaticError.message}. Please try again.`);
                }
            }
            return gasEstimate.mul(bignumber_1.BigNumber.from(10000).add(bignumber_1.BigNumber.from(1000))).div(bignumber_1.BigNumber.from(10000));
        });
    }
    getCallOptions(methodName, args) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const [gasLimit, fees] = yield Promise.all([
                this.getGasLimit(methodName, args),
                this._contract.provider.getFeeData(),
            ]);
            return {
                gasLimit,
                maxFeePerGas: (0, units_1.parseUnits)((0, units_1.formatUnits)((_a = fees.maxFeePerGas) !== null && _a !== void 0 ? _a : 0, 'gwei'), 'gwei'),
                maxPriorityFeePerGas: (0, units_1.parseUnits)((0, units_1.formatUnits)((_b = fees.maxPriorityFeePerGas) !== null && _b !== void 0 ? _b : 0, 'gwei'), 'gwei'),
            };
        });
    }
    read(methodName, args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._contract[methodName](...args);
        });
    }
    write(methodName, args = [], txOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = txOptions;
            if (!options) {
                options = yield this.getCallOptions(methodName, args);
            }
            const tx = yield this._contract[methodName](...args, options);
            return tx.wait();
        });
    }
}
exports.EthBaseContract = EthBaseContract;
//# sourceMappingURL=ethBaseContract.js.map