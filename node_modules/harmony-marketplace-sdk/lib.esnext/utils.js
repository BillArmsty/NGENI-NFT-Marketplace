"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForNewBlock = exports.isBNish = void 0;
const crypto_1 = require("@harmony-js/crypto");
const network_1 = require("@harmony-js/network");
const utils_1 = require("@harmony-js/utils");
const bn_js_1 = __importDefault(require("bn.js"));
function isBNish(value) {
    return (value != null &&
        (bn_js_1.default.isBN(value) ||
            (typeof value === 'number' && value % 1 === 0) ||
            (typeof value === 'string' && !!value.match(/^-?[0-9]+$/)) ||
            (0, crypto_1.isHexString)(value) ||
            typeof value === 'bigint' ||
            (0, crypto_1.isArrayish)(value)));
}
exports.isBNish = isBNish;
function waitForNewBlock(expectedBlockNumber, rpc, chainType, chainId) {
    const wsMessenger = new network_1.Messenger(new network_1.WSProvider(rpc), chainType, chainId);
    const newBlockSubscription = new network_1.NewHeaders(wsMessenger);
    return new Promise((res) => {
        newBlockSubscription.on('data', (data) => {
            const blockNumber = parseInt((0, utils_1.hexToNumber)(data.params.result.number), 10);
            if (blockNumber <= expectedBlockNumber) {
                console.log(`Currently at block ${blockNumber}, waiting for block ${expectedBlockNumber} to be confirmed`);
            }
            else {
                res();
            }
        });
    });
}
exports.waitForNewBlock = waitForNewBlock;
//# sourceMappingURL=utils.js.map