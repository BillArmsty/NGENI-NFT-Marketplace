import { Signer } from '@ethersproject/abstract-signer';
import { BigNumberish } from '@ethersproject/bignumber';
import { CallOverrides } from '@ethersproject/contracts';
import { TransactionReceipt } from '@ethersproject/providers';
import { EthBaseContract } from '../../contracts';
export declare class HRC1155EthManager extends EthBaseContract {
    constructor(address: string, signer: Signer);
    addToken(tokenManager: string, ethTokenAddr: string, name: string, symbol: string, tokenURI: string, txOptions?: CallOverrides): Promise<TransactionReceipt>;
    removeToken(tokenManager: string, ethTokenAddr: string, txOptions?: CallOverrides): Promise<TransactionReceipt>;
    burnToken(oneToken: string, tokenId: BigNumberish, recipient: string, amount: BigNumberish, txOptions?: CallOverrides): Promise<TransactionReceipt>;
    burnTokens(oneToken: string, tokenIds: BigNumberish[], recipient: string, amounts: BigNumberish[], txOptions?: CallOverrides): Promise<TransactionReceipt>;
    mintToken(oneToken: string, tokenId: BigNumberish, recipient: string, receiptId: string, amount: BigNumberish, data: string[], txOptions?: CallOverrides): Promise<TransactionReceipt>;
    mintTokens(oneToken: string, tokenIds: BigNumberish[], amounts: BigNumberish[], recipient: string, receiptId: string, data: string[], txOptions?: CallOverrides): Promise<TransactionReceipt>;
    mappings(hrc1155Addr: string): Promise<string>;
}
//# sourceMappingURL=index.d.ts.map