"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.BridgeHRC1155Token = void 0;
var transaction_1 = require("@harmony-js/transaction");
var utils_1 = require("@harmony-js/utils");
var bn_js_1 = __importDefault(require("bn.js"));
var constants_1 = require("../constants");
var utils_2 = require("../utils");
var bridgeToken_1 = require("./bridgeToken");
var bridgedHrc1155Token_1 = require("./bridgedHrc1155Token");
var hrc1155EthManager_1 = require("./hrc1155EthManager");
var hrc1155HmyManager_1 = require("./hrc1155HmyManager");
var hrc1155TokenManager_1 = require("./hrc1155TokenManager");
var BridgeHRC1155Token = (function (_super) {
    __extends(BridgeHRC1155Token, _super);
    function BridgeHRC1155Token() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BridgeHRC1155Token.prototype.getContractAddresses = function () {
        return this.isMainnet ? constants_1.MAINNET_HRC1155_CONTRACTS_ADDRESSES : constants_1.DEVNET_HRC1155_CONTRACTS_ADDRESSES;
    };
    BridgeHRC1155Token.prototype.getBridgedTokenAddress = function (token, tokenId, txOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ethManagerAddress, tokenManagerAddress, ethManager, tokenManager, erc1155Addr, err_1, _b, name_1, symbol, tokenURI;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.getContractAddresses(), ethManagerAddress = _a.ethManagerAddress, tokenManagerAddress = _a.tokenManagerAddress;
                        ethManager = new hrc1155EthManager_1.HRC1155EthManager(ethManagerAddress, this.ethOwnerWallet);
                        tokenManager = new hrc1155TokenManager_1.HRC1155TokenManager(tokenManagerAddress, this.ethMasterWallet);
                        erc1155Addr = undefined;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        return [4, ethManager.mappings(token.address)];
                    case 2:
                        erc1155Addr = _c.sent();
                        return [3, 4];
                    case 3:
                        err_1 = _c.sent();
                        return [3, 4];
                    case 4:
                        if (!(!erc1155Addr || erc1155Addr === constants_1.AddressZero)) return [3, 8];
                        return [4, Promise.all([
                                token.name(txOptions),
                                token.symbol(txOptions),
                                token.tokenURI(tokenId, txOptions),
                            ])];
                    case 5:
                        _b = _c.sent(), name_1 = _b[0], symbol = _b[1], tokenURI = _b[2];
                        return [4, ethManager.addToken(tokenManager.address, token.address, name_1, symbol, tokenURI)];
                    case 6:
                        _c.sent();
                        return [4, ethManager.mappings(token.address)];
                    case 7:
                        erc1155Addr = _c.sent();
                        _c.label = 8;
                    case 8: return [2, erc1155Addr];
                }
            });
        });
    };
    BridgeHRC1155Token.prototype.ethToHmy = function (sender, recipient, token, tokenInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var ethManagerAddress, ethManager, erc1155Address, erc1155, tokenIds, amounts, senderArray, balances, approveTx, burnTx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ethManagerAddress = this.getContractAddresses().ethManagerAddress;
                        ethManager = new hrc1155EthManager_1.HRC1155EthManager(ethManagerAddress, this.ethOwnerWallet);
                        return [4, ethManager.mappings(token.address)];
                    case 1:
                        erc1155Address = _a.sent();
                        erc1155 = new bridgedHrc1155Token_1.BridgedHRC1155Token(erc1155Address, this.ethOwnerWallet);
                        tokenIds = tokenInfo.tokenIds, amounts = tokenInfo.amounts;
                        if (!tokenIds || tokenIds.length === 0) {
                            throw Error('Error in tokenInfo, tokenIds cannot be undefined nor empty for HRC1155');
                        }
                        if (!amounts || amounts.length === 0) {
                            throw Error('Error in tokenInfo, amounts cannot be undefined nor empty for HRC1155');
                        }
                        senderArray = tokenIds.map(function () { return sender; });
                        return [4, erc1155.balanceOfBatch(senderArray, tokenIds)];
                    case 2:
                        balances = _a.sent();
                        balances.forEach(function (balance, index) {
                            if (balance.lt(amounts[index])) {
                                throw new Error("Insufficient funds. Balance: ".concat(balance, ". TokenId: ").concat(tokenIds[index], ". Amount: ").concat(amounts[index]));
                            }
                        });
                        return [4, erc1155.setApprovalForAll(ethManager.address, true)];
                    case 3:
                        approveTx = _a.sent();
                        if ((approveTx === null || approveTx === void 0 ? void 0 : approveTx.status) !== 1) {
                            throw new Error("Failed to approve erc721: ".concat(approveTx === null || approveTx === void 0 ? void 0 : approveTx.transactionHash));
                        }
                        return [4, ethManager.burnTokens(erc1155Address, tokenIds, recipient, amounts)];
                    case 4:
                        burnTx = _a.sent();
                        if ((burnTx === null || burnTx === void 0 ? void 0 : burnTx.status) !== 1) {
                            throw new Error("Failed to approve erc721: ".concat(burnTx === null || burnTx === void 0 ? void 0 : burnTx.transactionHash));
                        }
                        return [2, { addr: token.address, receiptId: burnTx === null || burnTx === void 0 ? void 0 : burnTx.transactionHash }];
                }
            });
        });
    };
    BridgeHRC1155Token.prototype.hmyToEth = function (sender, recipient, token, tokenInfo, txOptions) {
        var _a, _b;
        if (txOptions === void 0) { txOptions = constants_1.DEFAULT_TX_OPTIONS; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenIds, amounts, _c, ws, _d, waitingFor, hmyManagerAddress, hmyManager, senderArray, balances, erc1155Addr, approveTx, lockTokenTx, expectedBlockNumber;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        tokenIds = tokenInfo.tokenIds, amounts = tokenInfo.amounts, _c = tokenInfo.ws, ws = _c === void 0 ? constants_1.HARMONY_RPC_WS : _c, _d = tokenInfo.waitingFor, waitingFor = _d === void 0 ? 12 : _d;
                        if (!tokenIds || tokenIds.length === 0) {
                            throw Error('Error in tokenInfo, tokenIds cannot be undefined nor empty for HRC1155');
                        }
                        if (!amounts || amounts.length === 0) {
                            throw Error('Error in tokenInfo, amounts cannot be undefined nor empty for HRC1155');
                        }
                        if (amounts.length !== tokenIds.length) {
                            throw Error('Error in tokenInfo, amounts length must be same as tokensIds length');
                        }
                        hmyManagerAddress = this.getContractAddresses().hmyManagerAddress;
                        hmyManager = new hrc1155HmyManager_1.HRC1155HmyManager(hmyManagerAddress, this.hmyOwnerWallet);
                        senderArray = tokenIds.map(function () { return sender; });
                        return [4, token.balanceOfBatch(senderArray, tokenIds, txOptions)];
                    case 1:
                        balances = _e.sent();
                        balances.forEach(function (balance, index) {
                            if (balance.lt(new bn_js_1["default"](amounts[index]))) {
                                throw new Error("Insufficient funds. Balance: ".concat(balance, ". TokenId: ").concat(tokenIds[index], ". Amount: ").concat(amounts[index]));
                            }
                        });
                        return [4, this.getBridgedTokenAddress(token, tokenIds[0], txOptions)];
                    case 2:
                        erc1155Addr = _e.sent();
                        return [4, token.setApprovalForAll(hmyManager.address, true, txOptions)];
                    case 3:
                        approveTx = _e.sent();
                        if ((approveTx === null || approveTx === void 0 ? void 0 : approveTx.txStatus) !== transaction_1.TxStatus.CONFIRMED) {
                            throw new Error("Failed to approve manager: ".concat(approveTx));
                        }
                        return [4, hmyManager.lockHRC1155Tokens(token.address, tokenIds, recipient, amounts, [], txOptions)];
                    case 4:
                        lockTokenTx = _e.sent();
                        if ((lockTokenTx === null || lockTokenTx === void 0 ? void 0 : lockTokenTx.txStatus) !== transaction_1.TxStatus.CONFIRMED) {
                            throw new Error("Failed to lock tokens: ".concat(lockTokenTx));
                        }
                        expectedBlockNumber = parseInt((0, utils_1.hexToNumber)((_b = (_a = lockTokenTx === null || lockTokenTx === void 0 ? void 0 : lockTokenTx.receipt) === null || _a === void 0 ? void 0 : _a.blockNumber) !== null && _b !== void 0 ? _b : ''), 10) + waitingFor;
                        return [4, (0, utils_2.waitForNewBlock)(expectedBlockNumber, ws, token.messenger.chainType, token.messenger.chainId)];
                    case 5:
                        _e.sent();
                        return [2, { addr: erc1155Addr, receiptId: lockTokenTx === null || lockTokenTx === void 0 ? void 0 : lockTokenTx.id }];
                }
            });
        });
    };
    return BridgeHRC1155Token;
}(bridgeToken_1.BridgeToken));
exports.BridgeHRC1155Token = BridgeHRC1155Token;
//# sourceMappingURL=bridgeHrc1155Token.js.map