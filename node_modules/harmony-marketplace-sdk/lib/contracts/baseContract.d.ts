import { Account, Wallet } from '@harmony-js/account';
import { Contract as HmyContract } from '@harmony-js/contract';
import { ContractOptions } from '@harmony-js/contract/dist/utils/options';
import { Messenger } from '@harmony-js/network';
import { Transaction } from '@harmony-js/transaction';
import { ContractProviderType, ITransactionOptions } from '../interfaces';
import { Key, MnemonicKey, PrivateKey } from '../wallets';
export declare class ContractError extends Error {
    readonly type: string;
    constructor(message: string, type: string);
}
export declare class HarmonyContract extends HmyContract {
    readonly wallet: Wallet;
    constructor(abi: any[], address: string, provider: ContractProviderType, options?: ContractOptions);
}
export declare abstract class BaseContract {
    readonly address: string;
    readonly messenger: Messenger;
    protected readonly _contract: HarmonyContract;
    protected readonly _provider: ContractProviderType;
    constructor(address: string, abi: any[], provider: ContractProviderType, options?: ContractOptions);
    protected sanitizeAddress(address: string): string;
    protected estimateGas(method: string, args?: any[], options?: ITransactionOptions): Promise<ITransactionOptions>;
    call<T>(method: string, args?: any[], txOptions?: ITransactionOptions): Promise<T>;
    send(method: string, args?: any[], txOptions?: ITransactionOptions): Promise<Transaction>;
    setSignerByPrivateKey(privateKey: string): Account;
    setSignerByMnemonic(mnemonic: string, index?: number): Account;
    setSignerByKey(key: Key | PrivateKey | MnemonicKey): void;
}
//# sourceMappingURL=baseContract.d.ts.map