"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.EthBaseContract = void 0;
var bignumber_1 = require("@ethersproject/bignumber");
var contracts_1 = require("@ethersproject/contracts");
var units_1 = require("@ethersproject/units");
var EthBaseContract = (function () {
    function EthBaseContract(address, abi, signerOrProvider) {
        this._contract = new contracts_1.Contract(address, abi, signerOrProvider);
        this.address = this._contract.address;
    }
    EthBaseContract.prototype.getGasLimit = function (methodName, args) {
        return __awaiter(this, void 0, void 0, function () {
            var gasEstimate, gasError_1, errorResult, callStaticError_1;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 7]);
                        return [4, (_a = this._contract.estimateGas)[methodName].apply(_a, args)];
                    case 1:
                        gasEstimate = _c.sent();
                        return [3, 7];
                    case 2:
                        gasError_1 = _c.sent();
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 5, , 6]);
                        return [4, (_b = this._contract.callStatic)[methodName].apply(_b, args)];
                    case 4:
                        errorResult = _c.sent();
                        throw new Error("Unexpected successful call after failed estimate gas. Gas error: ".concat(gasError_1.message, ", Error: ").concat(errorResult.message));
                    case 5:
                        callStaticError_1 = _c.sent();
                        throw new Error("Unexpected issue with estimating the gas, ".concat(callStaticError_1.message, ". Please try again."));
                    case 6: return [3, 7];
                    case 7: return [2, gasEstimate.mul(bignumber_1.BigNumber.from(10000).add(bignumber_1.BigNumber.from(1000))).div(bignumber_1.BigNumber.from(10000))];
                }
            });
        });
    };
    EthBaseContract.prototype.getCallOptions = function (methodName, args) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var _c, gasLimit, fees;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4, Promise.all([
                            this.getGasLimit(methodName, args),
                            this._contract.provider.getFeeData(),
                        ])];
                    case 1:
                        _c = _d.sent(), gasLimit = _c[0], fees = _c[1];
                        return [2, {
                                gasLimit: gasLimit,
                                maxFeePerGas: (0, units_1.parseUnits)((0, units_1.formatUnits)((_a = fees.maxFeePerGas) !== null && _a !== void 0 ? _a : 0, 'gwei'), 'gwei'),
                                maxPriorityFeePerGas: (0, units_1.parseUnits)((0, units_1.formatUnits)((_b = fees.maxPriorityFeePerGas) !== null && _b !== void 0 ? _b : 0, 'gwei'), 'gwei')
                            }];
                }
            });
        });
    };
    EthBaseContract.prototype.read = function (methodName, args) {
        if (args === void 0) { args = []; }
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                return [2, (_a = this._contract)[methodName].apply(_a, args)];
            });
        });
    };
    EthBaseContract.prototype.write = function (methodName, args, txOptions) {
        if (args === void 0) { args = []; }
        return __awaiter(this, void 0, void 0, function () {
            var options, tx;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = txOptions;
                        if (!!options) return [3, 2];
                        return [4, this.getCallOptions(methodName, args)];
                    case 1:
                        options = _b.sent();
                        _b.label = 2;
                    case 2: return [4, (_a = this._contract)[methodName].apply(_a, __spreadArray(__spreadArray([], args, false), [options], false))];
                    case 3:
                        tx = _b.sent();
                        return [2, tx.wait()];
                }
            });
        });
    };
    return EthBaseContract;
}());
exports.EthBaseContract = EthBaseContract;
//# sourceMappingURL=ethBaseContract.js.map