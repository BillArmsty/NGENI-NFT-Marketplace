{"ast":null,"code":"import _regeneratorRuntime from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/Marketplace.js\";\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nexport default function Marketplace() {\n  var sampleData = [{\n    \"name\": \"NFT#1\",\n    \"description\": \"Alchemy's First NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"name\": \"NFT#2\",\n    \"description\": \"Alchemy's Second NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"name\": \"NFT#3\",\n    \"description\": \"Alchemy's Third NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }];\n\n  var _useState = useState(sampleData),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      updateData = _useState2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"flex flex-col place-items-center mt-20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"md:text-xl font-bold text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Top NFTs\"), React.createElement(\"div\", {\n    className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, data.map(function (value, index) {\n    return React.createElement(NFTTile, {\n      data: value,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }))));\n}\n\nfunction getAllNFTs() {\n  return _getAllNFTs.apply(this, arguments);\n}\n\nfunction _getAllNFTs() {\n  _getAllNFTs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var ethers, provider, signer, contract, transaction, items;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            signer = provider.getSigner(); //Pull the deployed contract instance\n\n            contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n            _context2.next = 6;\n            return contract.getAllNFTs();\n\n          case 6:\n            transaction = _context2.sent;\n            _context2.next = 9;\n            return Promise.all(transaction.map( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(i) {\n                var tokenURI, meta, price, item;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return contract.tokenURI(i.tokenId);\n\n                      case 2:\n                        tokenURI = _context.sent;\n                        _context.next = 5;\n                        return axios.get(tokenURI);\n\n                      case 5:\n                        meta = _context.sent;\n                        meta = meta.data;\n                        price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n                        item = {\n                          price: price,\n                          tokenId: i.tokenId.toNumber(),\n                          seller: i.seller,\n                          owner: i.owner,\n                          image: meta.image,\n                          name: meta.name,\n                          description: meta.description\n                        };\n                        return _context.abrupt(\"return\", item);\n\n                      case 10:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n\n          case 9:\n            items = _context2.sent;\n            updateFetched(true);\n            updateData(items);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAllNFTs.apply(this, arguments);\n}\n\nif (!dataFetched) getAllNFTs();","map":{"version":3,"sources":["/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/Marketplace.js"],"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","Marketplace","sampleData","data","updateData","map","value","index","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","Promise","all","i","tokenURI","tokenId","get","meta","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","items","updateFetched","dataFetched"],"mappings":"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","sourcesContent":["import Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function Marketplace() {\nconst sampleData = [\n    {\n        \"name\": \"NFT#1\",\n        \"description\": \"Alchemy's First NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#2\",\n        \"description\": \"Alchemy's Second NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#3\",\n        \"description\": \"Alchemy's Third NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n];\nconst [data, updateData] = useState(sampleData);\n\nreturn (\n    <div>\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-20\">\n            <div className=\"md:text-xl font-bold text-white\">\n                Top NFTs\n            </div>\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n                {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                })}\n            </div>\n        </div>            \n    </div>\n);\n\n}\n\nasync function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs()\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n        const tokenURI = await contract.tokenURI(i.tokenId);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n        let item = {\n            price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n        }\n        return item;\n    }))\n\n    updateFetched(true);\n    updateData(items);\n}\n\nif(!dataFetched)\n    getAllNFTs();"]},"metadata":{},"sourceType":"module"}