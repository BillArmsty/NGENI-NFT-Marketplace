{"ast":null,"code":"import _regeneratorRuntime from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//require('dotenv').config();\nvar key = process.env.REACT_APP_PINATA_KEY;\nvar secret = process.env.REACT_APP_PINATA_SECRET;\n\nvar axios = require('axios');\n\nvar FormData = require('form-data');\n\nexport var uploadJSONToIPFS = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(JSONBody) {\n    var url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"https://api.pinata.cloud/pinning/pinJSONToIPFS\"; //making axios POST request to Pinata ⬇️\n\n            return _context.abrupt(\"return\", axios.post(url, JSONBody, {\n              headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret\n              }\n            }).then(function (response) {\n              return {\n                success: true,\n                pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n              };\n            }).catch(function (error) {\n              console.log(error);\n              return {\n                success: false,\n                message: error.message\n              };\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function uploadJSONToIPFS(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var uploadFileToIPFS = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {\n    var url, data, metadata, pinataOptions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = \"https://api.pinata.cloud/pinning/pinFileToIPFS\"; //making axios POST request to Pinata ⬇️\n\n            data = new FormData();\n            data.append('file', file);\n            metadata = JSON.stringify({\n              name: 'testname',\n              keyvalues: {\n                exampleKey: 'exampleValue'\n              }\n            });\n            data.append('pinataMetadata', metadata); //pinataOptions are optional\n\n            pinataOptions = JSON.stringify({\n              cidVersion: 0,\n              customPinPolicy: {\n                regions: [{\n                  id: 'FRA1',\n                  desiredReplicationCount: 1\n                }, {\n                  id: 'NYC1',\n                  desiredReplicationCount: 2\n                }]\n              }\n            });\n            data.append('pinataOptions', pinataOptions);\n            return _context2.abrupt(\"return\", axios.post(url, data, {\n              maxBodyLength: 'Infinity',\n              headers: {\n                'Content-Type': \"multipart/form-data; boundary=\".concat(data._boundary),\n                pinata_api_key: key,\n                pinata_secret_api_key: secret\n              }\n            }).then(function (response) {\n              console.log(\"image uploaded\", response.data.IpfsHash);\n              return {\n                success: true,\n                pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n              };\n            }).catch(function (error) {\n              console.log(error);\n              return {\n                success: false,\n                message: error.message\n              };\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function uploadFileToIPFS(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/pinata.js"],"names":["key","process","env","REACT_APP_PINATA_KEY","secret","REACT_APP_PINATA_SECRET","axios","require","FormData","uploadJSONToIPFS","JSONBody","url","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","uploadFileToIPFS","file","append","metadata","JSON","stringify","name","keyvalues","exampleKey","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary"],"mappings":";;AAAA;AACA,IAAMA,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAxB;AACA,IAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,uBAA3B;;AAEA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AAEA,OAAO,IAAME,gBAAgB;AAAA,sEAAG,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,GADsB,qDAE5B;;AAF4B,6CAGrBL,KAAK,CACPM,IADE,CACGD,GADH,EACQD,QADR,EACkB;AACjBG,cAAAA,OAAO,EAAE;AACLC,gBAAAA,cAAc,EAAEd,GADX;AAELe,gBAAAA,qBAAqB,EAAEX;AAFlB;AADQ,aADlB,EAOFY,IAPE,CAOG,UAAUC,QAAV,EAAoB;AACvB,qBAAO;AACHC,gBAAAA,OAAO,EAAE,IADN;AAEHC,gBAAAA,SAAS,EAAE,uCAAuCF,QAAQ,CAACG,IAAT,CAAcC;AAF7D,eAAP;AAIF,aAZE,EAaFC,KAbE,CAaI,UAAUC,KAAV,EAAiB;AACpBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,qBAAO;AACHL,gBAAAA,OAAO,EAAE,KADN;AAEHQ,gBAAAA,OAAO,EAAEH,KAAK,CAACG;AAFZ,eAAP;AAKP,aApBM,CAHqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBjB,gBAAgB;AAAA;AAAA;AAAA,GAAtB;AA0BP,OAAO,IAAMkB,gBAAgB;AAAA,uEAAG,kBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBjB,YAAAA,GADsB,qDAE5B;;AAEIS,YAAAA,IAJwB,GAIjB,IAAIZ,QAAJ,EAJiB;AAK5BY,YAAAA,IAAI,CAACS,MAAL,CAAY,MAAZ,EAAoBD,IAApB;AAEME,YAAAA,QAPsB,GAOXC,IAAI,CAACC,SAAL,CAAe;AAC5BC,cAAAA,IAAI,EAAE,UADsB;AAE5BC,cAAAA,SAAS,EAAE;AACPC,gBAAAA,UAAU,EAAE;AADL;AAFiB,aAAf,CAPW;AAa5Bf,YAAAA,IAAI,CAACS,MAAL,CAAY,gBAAZ,EAA8BC,QAA9B,EAb4B,CAe5B;;AACMM,YAAAA,aAhBsB,GAgBNL,IAAI,CAACC,SAAL,CAAe;AACjCK,cAAAA,UAAU,EAAE,CADqB;AAEjCC,cAAAA,eAAe,EAAE;AACbC,gBAAAA,OAAO,EAAE,CACL;AACIC,kBAAAA,EAAE,EAAE,MADR;AAEIC,kBAAAA,uBAAuB,EAAE;AAF7B,iBADK,EAKL;AACID,kBAAAA,EAAE,EAAE,MADR;AAEIC,kBAAAA,uBAAuB,EAAE;AAF7B,iBALK;AADI;AAFgB,aAAf,CAhBM;AA+B5BrB,YAAAA,IAAI,CAACS,MAAL,CAAY,eAAZ,EAA6BO,aAA7B;AA/B4B,8CAiCrB9B,KAAK,CACPM,IADE,CACGD,GADH,EACQS,IADR,EACc;AACbsB,cAAAA,aAAa,EAAE,UADF;AAEb7B,cAAAA,OAAO,EAAE;AACL,wEAAiDO,IAAI,CAACuB,SAAtD,CADK;AAEL7B,gBAAAA,cAAc,EAAEd,GAFX;AAGLe,gBAAAA,qBAAqB,EAAEX;AAHlB;AAFI,aADd,EASFY,IATE,CASG,UAAUC,QAAV,EAAoB;AACtBO,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,QAAQ,CAACG,IAAT,CAAcC,QAA5C;AACA,qBAAO;AACJH,gBAAAA,OAAO,EAAE,IADL;AAEJC,gBAAAA,SAAS,EAAE,uCAAuCF,QAAQ,CAACG,IAAT,CAAcC;AAF5D,eAAP;AAIH,aAfE,EAgBFC,KAhBE,CAgBI,UAAUC,KAAV,EAAiB;AACpBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,qBAAO;AACHL,gBAAAA,OAAO,EAAE,KADN;AAEHQ,gBAAAA,OAAO,EAAEH,KAAK,CAACG;AAFZ,eAAP;AAKP,aAvBM,CAjCqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBC,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["//require('dotenv').config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require('axios');\nconst FormData = require('form-data');\n\nexport const uploadJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(url, JSONBody, {\n            headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};\n\nexport const uploadFileToIPFS = async(file) => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    \n    let data = new FormData();\n    data.append('file', file);\n\n    const metadata = JSON.stringify({\n        name: 'testname',\n        keyvalues: {\n            exampleKey: 'exampleValue'\n        }\n    });\n    data.append('pinataMetadata', metadata);\n\n    //pinataOptions are optional\n    const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n            regions: [\n                {\n                    id: 'FRA1',\n                    desiredReplicationCount: 1\n                },\n                {\n                    id: 'NYC1',\n                    desiredReplicationCount: 2\n                }\n            ]\n        }\n    });\n    data.append('pinataOptions', pinataOptions);\n\n    return axios \n        .post(url, data, {\n            maxBodyLength: 'Infinity',\n            headers: {\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n            console.log(\"image uploaded\", response.data.IpfsHash)\n            return {\n               success: true,\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};"]},"metadata":{},"sourceType":"module"}