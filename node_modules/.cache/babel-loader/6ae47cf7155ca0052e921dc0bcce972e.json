{"ast":null,"code":"import _regeneratorRuntime from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/Marketplace.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nexport default function Marketplace() {\n  var sampleData = [{\n    \"name\": \"NFT#1\",\n    \"description\": \"Alchemy's First NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"name\": \"NFT#2\",\n    \"description\": \"Alchemy's Second NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"name\": \"NFT#3\",\n    \"description\": \"Alchemy's Third NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }];\n\n  var _useState = useState(sampleData),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      updateData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataFetched = _useState4[0],\n      updateFetched = _useState4[1];\n\n  function getAllNFTs() {\n    return _getAllNFTs.apply(this, arguments);\n  }\n\n  function _getAllNFTs() {\n    _getAllNFTs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var ethers, provider, signer, contract, transaction, items;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n              provider = new ethers.providers.Web3Provider(window.ethereum);\n              signer = provider.getSigner(); //Pull the deployed contract instance\n\n              contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n              _context2.next = 6;\n              return contract.getAllNFTs();\n\n            case 6:\n              transaction = _context2.sent;\n              _context2.next = 9;\n              return Promise.all(transaction.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(i) {\n                  var tokenURI, meta, price, item;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return contract.tokenURI(i.tokenId);\n\n                        case 2:\n                          tokenURI = _context.sent;\n                          _context.next = 5;\n                          return axios.get(tokenURI);\n\n                        case 5:\n                          meta = _context.sent;\n                          meta = meta.data;\n                          price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n                          item = {\n                            price: price,\n                            tokenId: i.tokenId.toNumber(),\n                            seller: i.seller,\n                            owner: i.owner,\n                            image: meta.image,\n                            name: meta.name,\n                            description: meta.description\n                          };\n                          return _context.abrupt(\"return\", item);\n\n                        case 10:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 9:\n              items = _context2.sent;\n              updateFetched(true);\n              updateData(items);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getAllNFTs.apply(this, arguments);\n  }\n\n  if (!dataFetched) getAllNFTs();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"flex flex-col place-items-center mt-20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"md:text-xl font-bold text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Top NFTs\"), React.createElement(\"div\", {\n    className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, data.map(function (value, index) {\n    return React.createElement(NFTTile, {\n      data: value,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    });\n  }))));\n}","map":{"version":3,"sources":["/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/Marketplace.js"],"names":["React","Component","Navbar","NFTTile","MarketplaceJSON","axios","useState","Marketplace","sampleData","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","Promise","all","map","i","tokenURI","tokenId","get","meta","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","items","value","index"],"mappings":"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","sourcesContent":["import React, { Component }  from 'react';\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function Marketplace() {\nconst sampleData = [\n    {\n        \"name\": \"NFT#1\",\n        \"description\": \"Alchemy's First NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#2\",\n        \"description\": \"Alchemy's Second NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#3\",\n        \"description\": \"Alchemy's Third NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n];\nconst [data, updateData] = useState(sampleData);\nconst [dataFetched, updateFetched] = useState(false);\n\nasync function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs()\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n        const tokenURI = await contract.tokenURI(i.tokenId);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n        let item = {\n            price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n        }\n        return item;\n    }))\n\n    updateFetched(true);\n    updateData(items);\n}\n\nif(!dataFetched)\n    getAllNFTs();\n\nreturn (\n    <div>\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-20\">\n            <div className=\"md:text-xl font-bold text-white\">\n                Top NFTs\n            </div>\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n                {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                })}\n            </div>\n        </div>            \n    </div>\n);\n\n}\n\n"]},"metadata":{},"sourceType":"module"}