{"ast":null,"code":"import _regeneratorRuntime from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/SellNFT.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from '../Marketplace.json';\nimport { useLocation } from \"react-router\";\nexport default function SellNFT() {\n  var _useState = useState({\n    name: '',\n    description: '',\n    price: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formParams = _useState2[0],\n      updateFormParams = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fileURL = _useState4[0],\n      setFileURL = _useState4[1];\n\n  var ethers = require(\"ethers\");\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      updateMessage = _useState6[1];\n\n  var location = useLocation();\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"flex flex-col place-items-center mt-10\",\n    id: \"nftForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"text-center font-bold text-purple-500 mb-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Upload your NFT to the marketplace\"), React.createElement(\"div\", {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"NFT Name\"), React.createElement(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Axie#4563\",\n    onChange: function onChange(e) {\n      return updateFormParams(_objectSpread({}, formParams, {\n        name: e.target.value\n      }));\n    },\n    value: formParams.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"mb-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"NFT Description\"), React.createElement(\"textarea\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    cols: \"40\",\n    rows: \"5\",\n    id: \"description\",\n    type: \"text\",\n    placeholder: \"Axie Infinity Collection\",\n    value: formParams.description,\n    onChange: function onChange(e) {\n      return updateFormParams(_objectSpread({}, formParams, {\n        description: e.target.value\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"mb-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Price (in ONE)\"), React.createElement(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    type: \"number\",\n    placeholder: \"Min 0.01 ETH\",\n    step: \"0.01\",\n    value: formParams.price,\n    onChange: function onChange(e) {\n      return updateFormParams(_objectSpread({}, formParams, {\n        price: e.target.value\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Upload Image\"), React.createElement(\"input\", {\n    type: \"file\",\n    onChange: OnChangeFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"text-green text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, message), React.createElement(\"button\", {\n    onClick: \"\",\n    className: \"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"List NFT\"))));\n} //This function uploads the NFT image to IPFS\n\nfunction OnChangeFile(_x) {\n  return _OnChangeFile.apply(this, arguments);\n} //This function uploads the metadata to IPDS\n\n\nfunction _OnChangeFile() {\n  _OnChangeFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n    var file, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            file = e.target.files[0]; //check for file extension\n\n            _context.prev = 1;\n            _context.next = 4;\n            return uploadFileToIPFS(file);\n\n          case 4:\n            response = _context.sent;\n\n            if (response.success === true) {\n              console.log(\"Uploaded image to Pinata: \", response.pinataURL);\n              setFileURL(response.pinataURL);\n            }\n\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(\"Error during file upload\", _context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 8]]);\n  }));\n  return _OnChangeFile.apply(this, arguments);\n}\n\nfunction uploadMetadataToIPFS() {\n  return _uploadMetadataToIPFS.apply(this, arguments);\n}\n\nfunction _uploadMetadataToIPFS() {\n  _uploadMetadataToIPFS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _formParams, name, description, price, nftJSON, response;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _formParams = formParams, name = _formParams.name, description = _formParams.description, price = _formParams.price; //Make sure that none of the fields are empty\n\n            if (!(!name || !description || !price || !fileURL)) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            nftJSON = {\n              name: name,\n              description: description,\n              price: price,\n              image: fileURL\n            };\n            _context2.prev = 4;\n            _context2.next = 7;\n            return uploadJSONToIPFS(nftJSON);\n\n          case 7:\n            response = _context2.sent;\n\n            if (!(response.success === true)) {\n              _context2.next = 11;\n              break;\n            }\n\n            console.log(\"Uploaded JSON to Pinata: \", response);\n            return _context2.abrupt(\"return\", response.pinataURL);\n\n          case 11:\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](4);\n            console.log(\"error uploading JSON metadata:\", _context2.t0);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 13]]);\n  }));\n  return _uploadMetadataToIPFS.apply(this, arguments);\n}\n\nfunction listNFT(_x2) {\n  return _listNFT.apply(this, arguments);\n}\n\nfunction _listNFT() {\n  _listNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(e) {\n    var metadataURL, provider, signer, contract, price, listingPrice, transaction;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            e.preventDefault(); //Upload data to IPFS\n\n            _context3.prev = 1;\n            _context3.next = 4;\n            return uploadMetadataToIPFS();\n\n          case 4:\n            metadataURL = _context3.sent;\n            //After adding your Hardhat network to your metamask, this code will get providers and signers\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            signer = provider.getSigner();\n            updateMessage(\"Please wait.. uploading (upto 5 mins)\"); //Pull the deployed contract instance\n\n            contract = new ethers.Contract(Marketplace.address, Marketplace.abi, signer); //massage the params to be sent to the create NFT request\n\n            price = ethers.utils.parseUnits(formParams.price, 'ether');\n            _context3.next = 12;\n            return contract.getListPrice();\n\n          case 12:\n            listingPrice = _context3.sent;\n            listingPrice = listingPrice.toString(); //actually create the NFT\n\n            _context3.next = 16;\n            return contract.createToken(metadataURL, price, {\n              value: listingPrice\n            });\n\n          case 16:\n            transaction = _context3.sent;\n            _context3.next = 19;\n            return transaction.wait();\n\n          case 19:\n            alert(\"Successfully listed your NFT!\");\n            updateMessage(\"\");\n            updateFormParams({\n              name: '',\n              description: '',\n              price: ''\n            });\n            window.location.replace(\"/\");\n            _context3.next = 28;\n            break;\n\n          case 25:\n            _context3.prev = 25;\n            _context3.t0 = _context3[\"catch\"](1);\n            alert(\"Upload error\" + _context3.t0);\n\n          case 28:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 25]]);\n  }));\n  return _listNFT.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/SellNFT.js"],"names":["React","Component","Navbar","useState","uploadFileToIPFS","uploadJSONToIPFS","Marketplace","useLocation","SellNFT","name","description","price","formParams","updateFormParams","fileURL","setFileURL","ethers","require","message","updateMessage","location","e","target","value","OnChangeFile","file","files","response","success","console","log","pinataURL","uploadMetadataToIPFS","nftJSON","image","listNFT","preventDefault","metadataURL","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","utils","parseUnits","getListPrice","listingPrice","toString","createToken","transaction","wait","alert","replace"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,WAAnD;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,eAAe,SAASC,OAAT,GAAoB;AAAA,kBACQL,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,WAAW,EAAE,EAAzB;AAA6BC,IAAAA,KAAK,EAAE;AAApC,GAAD,CADhB;AAAA;AAAA,MACxBC,UADwB;AAAA,MACZC,gBADY;;AAAA,mBAEDV,QAAQ,CAAC,IAAD,CAFP;AAAA;AAAA,MAExBW,OAFwB;AAAA,MAEfC,UAFe;;AAG/B,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAH+B,mBAIEd,QAAQ,CAAC,EAAD,CAJV;AAAA;AAAA,MAIxBe,OAJwB;AAAA,MAIfC,aAJe;;AAK/B,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAwD,IAAA,EAAE,EAAC,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,SAAS,EAAC,gDAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAI,IAAA,SAAS,EAAC,4CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADA,EAEI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,8CAAjB;AAAgE,IAAA,OAAO,EAAC,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAO,IAAA,SAAS,EAAC,4HAAjB;AAA8I,IAAA,EAAE,EAAC,MAAjJ;AAAwJ,IAAA,IAAI,EAAC,MAA7J;AAAoK,IAAA,WAAW,EAAC,WAAhL;AAA4L,IAAA,QAAQ,EAAE,kBAAAc,CAAC;AAAA,aAAIR,gBAAgB,mBAAKD,UAAL;AAAiBH,QAAAA,IAAI,EAAEY,CAAC,CAACC,MAAF,CAASC;AAAhC,SAApB;AAAA,KAAvM;AAAoQ,IAAA,KAAK,EAAEX,UAAU,CAACH,IAAtR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,EAMI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,8CAAjB;AAAgE,IAAA,OAAO,EAAC,aAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI;AAAU,IAAA,SAAS,EAAC,4HAApB;AAAiJ,IAAA,IAAI,EAAC,IAAtJ;AAA2J,IAAA,IAAI,EAAC,GAAhK;AAAoK,IAAA,EAAE,EAAC,aAAvK;AAAqL,IAAA,IAAI,EAAC,MAA1L;AAAiM,IAAA,WAAW,EAAC,0BAA7M;AAAwO,IAAA,KAAK,EAAEG,UAAU,CAACF,WAA1P;AAAuQ,IAAA,QAAQ,EAAE,kBAAAW,CAAC;AAAA,aAAIR,gBAAgB,mBAAKD,UAAL;AAAiBF,QAAAA,WAAW,EAAEW,CAAC,CAACC,MAAF,CAASC;AAAvC,SAApB;AAAA,KAAlR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CANJ,EAUI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,8CAAjB;AAAgE,IAAA,OAAO,EAAC,OAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAO,IAAA,SAAS,EAAC,4HAAjB;AAA8I,IAAA,IAAI,EAAC,QAAnJ;AAA4J,IAAA,WAAW,EAAC,cAAxK;AAAuL,IAAA,IAAI,EAAC,MAA5L;AAAmM,IAAA,KAAK,EAAEX,UAAU,CAACD,KAArN;AAA4N,IAAA,QAAQ,EAAE,kBAAAU,CAAC;AAAA,aAAIR,gBAAgB,mBAAKD,UAAL;AAAiBD,QAAAA,KAAK,EAAEU,CAAC,CAACC,MAAF,CAASC;AAAjC,SAApB;AAAA,KAAvO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAVJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,8CAAjB;AAAgE,IAAA,OAAO,EAAC,OAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAO,IAAA,IAAI,EAAE,MAAb;AAAqB,IAAA,QAAQ,EAAEC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAdJ,EAkBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,EAmBI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCN,OAAzC,CAnBJ,EAoBI;AAAQ,IAAA,OAAO,EAAE,EAAjB;AAAqB,IAAA,SAAS,EAAC,uEAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBJ,CADJ,CAFA,CADJ;AA+BH,C,CAEC;;SACiBM,Y;;EAgBf;;;;2EAhBA,iBAA4BH,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQI,YAAAA,IADR,GACeJ,CAAC,CAACC,MAAF,CAASI,KAAT,CAAe,CAAf,CADf,EAEI;;AAFJ;AAAA;AAAA,mBAK+BtB,gBAAgB,CAACqB,IAAD,CAL/C;;AAAA;AAKcE,YAAAA,QALd;;AAMQ,gBAAGA,QAAQ,CAACC,OAAT,KAAqB,IAAxB,EAA8B;AAC1BC,cAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CH,QAAQ,CAACI,SAAnD;AACAhB,cAAAA,UAAU,CAACY,QAAQ,CAACI,SAAV,CAAV;AACH;;AATT;AAAA;;AAAA;AAAA;AAAA;AAYQF,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAiBeE,oB;;;;;mFAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACuCpB,UADvC,EACWH,IADX,eACWA,IADX,EACiBC,WADjB,eACiBA,WADjB,EAC8BC,KAD9B,eAC8BA,KAD9B,EAEI;;AAFJ,kBAGQ,CAACF,IAAD,IAAS,CAACC,WAAV,IAAyB,CAACC,KAA1B,IAAmC,CAACG,OAH5C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAMUmB,YAAAA,OANV,GAMoB;AACZxB,cAAAA,IAAI,EAAJA,IADY;AACNC,cAAAA,WAAW,EAAXA,WADM;AACOC,cAAAA,KAAK,EAALA,KADP;AACcuB,cAAAA,KAAK,EAAEpB;AADrB,aANpB;AAAA;AAAA;AAAA,mBAY+BT,gBAAgB,CAAC4B,OAAD,CAZ/C;;AAAA;AAYcN,YAAAA,QAZd;;AAAA,kBAaWA,QAAQ,CAACC,OAAT,KAAqB,IAbhC;AAAA;AAAA;AAAA;;AAcYC,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCH,QAAzC;AAdZ,8CAemBA,QAAQ,CAACI,SAf5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBQF,YAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;;AAnBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAuBeK,O;;;;;sEAAf,kBAAuBd,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACIA,YAAAA,CAAC,CAACe,cAAF,GADJ,CAGI;;AAHJ;AAAA;AAAA,mBAKkCJ,oBAAoB,EALtD;;AAAA;AAKcK,YAAAA,WALd;AAMQ;AACMC,YAAAA,QAPd,GAOyB,IAAItB,MAAM,CAACuB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAPzB;AAQcC,YAAAA,MARd,GAQuBL,QAAQ,CAACM,SAAT,EARvB;AASQzB,YAAAA,aAAa,CAAC,uCAAD,CAAb,CATR,CAWQ;;AACI0B,YAAAA,QAZZ,GAYuB,IAAI7B,MAAM,CAAC8B,QAAX,CAAoBxC,WAAW,CAACyC,OAAhC,EAAyCzC,WAAW,CAAC0C,GAArD,EAA0DL,MAA1D,CAZvB,EAcQ;;AACMhC,YAAAA,KAfd,GAesBK,MAAM,CAACiC,KAAP,CAAaC,UAAb,CAAwBtC,UAAU,CAACD,KAAnC,EAA0C,OAA1C,CAftB;AAAA;AAAA,mBAgBiCkC,QAAQ,CAACM,YAAT,EAhBjC;;AAAA;AAgBYC,YAAAA,YAhBZ;AAiBQA,YAAAA,YAAY,GAAGA,YAAY,CAACC,QAAb,EAAf,CAjBR,CAmBQ;;AAnBR;AAAA,mBAoBgCR,QAAQ,CAACS,WAAT,CAAqBjB,WAArB,EAAkC1B,KAAlC,EAAyC;AAAEY,cAAAA,KAAK,EAAE6B;AAAT,aAAzC,CApBhC;;AAAA;AAoBYG,YAAAA,WApBZ;AAAA;AAAA,mBAqBcA,WAAW,CAACC,IAAZ,EArBd;;AAAA;AAuBQC,YAAAA,KAAK,CAAC,+BAAD,CAAL;AACAtC,YAAAA,aAAa,CAAC,EAAD,CAAb;AACAN,YAAAA,gBAAgB,CAAC;AAAEJ,cAAAA,IAAI,EAAE,EAAR;AAAYC,cAAAA,WAAW,EAAE,EAAzB;AAA6BC,cAAAA,KAAK,EAAE;AAApC,aAAD,CAAhB;AACA8B,YAAAA,MAAM,CAACrB,QAAP,CAAgBsC,OAAhB,CAAwB,GAAxB;AA1BR;AAAA;;AAAA;AAAA;AAAA;AA6BQD,YAAAA,KAAK,CAAE,6BAAF,CAAL;;AA7BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import React, { Component }  from 'react';\nimport Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from '../Marketplace.json';\nimport { useLocation } from \"react-router\";\n\nexport default function SellNFT () {\n    const [formParams, updateFormParams] = useState({ name: '', description: '', price: ''});\n    const [fileURL, setFileURL] = useState(null);\n    const ethers = require(\"ethers\");\n    const [message, updateMessage] = useState('');\n    const location = useLocation();\n\n    return (\n        <div className=\"\">\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-10\" id=\"nftForm\">\n            <form className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n            <h3 className=\"text-center font-bold text-purple-500 mb-8\">Upload your NFT to the marketplace</h3>\n                <div className=\"mb-4\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">NFT Name</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"name\" type=\"text\" placeholder=\"Axie#4563\" onChange={e => updateFormParams({...formParams, name: e.target.value})} value={formParams.name}></input>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"description\">NFT Description</label>\n                    <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" cols=\"40\" rows=\"5\" id=\"description\" type=\"text\" placeholder=\"Axie Infinity Collection\" value={formParams.description} onChange={e => updateFormParams({...formParams, description: e.target.value})}></textarea>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"price\">Price (in ONE)</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"number\" placeholder=\"Min 0.01 ETH\" step=\"0.01\" value={formParams.price} onChange={e => updateFormParams({...formParams, price: e.target.value})}></input>\n                </div>\n                <div>\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"image\">Upload Image</label>\n                    <input type={\"file\"} onChange={OnChangeFile}></input>\n                </div>\n                <br></br>\n                <div className=\"text-green text-center\">{message}</div>\n                <button onClick={\"\"} className=\"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\">\n                    List NFT\n                </button>\n            </form>\n        </div>\n        </div>\n    )\n}\n  \n  //This function uploads the NFT image to IPFS\n    async function OnChangeFile(e) {\n        var file = e.target.files[0];\n        //check for file extension\n        try {\n            //upload the file to IPFS\n            const response = await uploadFileToIPFS(file);\n            if(response.success === true) {\n                console.log(\"Uploaded image to Pinata: \", response.pinataURL)\n                setFileURL(response.pinataURL);\n            }\n        }\n        catch(e) {\n            console.log(\"Error during file upload\", e);\n        }\n    }\n\n    //This function uploads the metadata to IPDS\n    async function uploadMetadataToIPFS() {\n        const {name, description, price} = formParams;\n        //Make sure that none of the fields are empty\n        if( !name || !description || !price || !fileURL)\n            return;\n\n        const nftJSON = {\n            name, description, price, image: fileURL\n        }\n\n        try {\n            //upload the metadata JSON to IPFS\n            const response = await uploadJSONToIPFS(nftJSON);\n            if(response.success === true){\n                console.log(\"Uploaded JSON to Pinata: \", response)\n                return response.pinataURL;\n            }\n        }\n        catch(e) {\n            console.log(\"error uploading JSON metadata:\", e)\n        }\n    }\n\n    async function listNFT(e) {\n        e.preventDefault();\n\n        //Upload data to IPFS\n        try {\n            const metadataURL = await uploadMetadataToIPFS();\n            //After adding your Hardhat network to your metamask, this code will get providers and signers\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            updateMessage(\"Please wait.. uploading (upto 5 mins)\")\n\n            //Pull the deployed contract instance\n            let contract = new ethers.Contract(Marketplace.address, Marketplace.abi, signer)\n\n            //massage the params to be sent to the create NFT request\n            const price = ethers.utils.parseUnits(formParams.price, 'ether')\n            let listingPrice = await contract.getListPrice()\n            listingPrice = listingPrice.toString()\n\n            //actually create the NFT\n            let transaction = await contract.createToken(metadataURL, price, { value: listingPrice })\n            await transaction.wait()\n\n            alert(\"Successfully listed your NFT!\");\n            updateMessage(\"\");\n            updateFormParams({ name: '', description: '', price: ''});\n            window.location.replace(\"/\")\n        }\n        catch(e) {\n            alert( \"Upload error\"+e )\n        }\n    }\n"]},"metadata":{},"sourceType":"module"}