{"ast":null,"code":"import _regeneratorRuntime from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/SellNFT.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from '../Marketplace.json';\nimport { useLocation } from \"react-router\";\nexport default function SellNFT() {\n  var _useState = useState({\n    name: '',\n    description: '',\n    price: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formParams = _useState2[0],\n      updateFormParams = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fileURL = _useState4[0],\n      setFileURL = _useState4[1];\n\n  var ethers = require(\"ethers\");\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      updateMessage = _useState6[1];\n\n  var location = useLocation(); //This function uploads the NFT image to IPFS\n\n  function OnChangeFile(_x) {\n    return _OnChangeFile.apply(this, arguments);\n  } //This function uploads the metadata to IPDS\n\n\n  function _OnChangeFile() {\n    _OnChangeFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var file, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              file = e.target.files[0]; //check for file extension\n\n              _context.prev = 1;\n              _context.next = 4;\n              return uploadFileToIPFS(file);\n\n            case 4:\n              response = _context.sent;\n\n              if (response.success === true) {\n                console.log(\"Uploaded image to Pinata: \", response.pinataURL);\n                setFileURL(response.pinataURL);\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(\"Error during file upload\", _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n    return _OnChangeFile.apply(this, arguments);\n  }\n\n  function uploadMetadataToIPFS() {\n    return _uploadMetadataToIPFS.apply(this, arguments);\n  }\n\n  function _uploadMetadataToIPFS() {\n    _uploadMetadataToIPFS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var name, description, price, nftJSON, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              name = formParams.name, description = formParams.description, price = formParams.price; //Make sure that none of the fields are empty\n\n              if (!(!name || !description || !price || !fileURL)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              nftJSON = {\n                name: name,\n                description: description,\n                price: price,\n                image: fileURL\n              };\n              _context2.prev = 4;\n              _context2.next = 7;\n              return uploadJSONToIPFS(nftJSON);\n\n            case 7:\n              response = _context2.sent;\n\n              if (!(response.success === true)) {\n                _context2.next = 11;\n                break;\n              }\n\n              console.log(\"Uploaded JSON to Pinata: \", response);\n              return _context2.abrupt(\"return\", response.pinataURL);\n\n            case 11:\n              _context2.next = 16;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](4);\n              console.log(\"error uploading JSON metadata:\", _context2.t0);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 13]]);\n    }));\n    return _uploadMetadataToIPFS.apply(this, arguments);\n  }\n\n  function listNFT(_x2) {\n    return _listNFT.apply(this, arguments);\n  }\n\n  function _listNFT() {\n    _listNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(e) {\n      var metadataURL, provider, signer, contract, price, listingPrice, transaction;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              e.preventDefault(); //Upload data to IPFS\n\n              _context3.prev = 1;\n              _context3.next = 4;\n              return uploadMetadataToIPFS();\n\n            case 4:\n              metadataURL = _context3.sent;\n              //After adding your Hardhat network to your metamask, this code will get providers and signers\n              provider = new ethers.providers.Web3Provider(window.ethereum);\n              signer = provider.getSigner();\n              updateMessage(\"Please wait.. uploading (upto 5 mins)\"); //Pull the deployed contract instance\n\n              contract = new ethers.Contract(Marketplace.address, Marketplace.abi, signer); //massage the params to be sent to the create NFT request\n\n              price = ethers.utils.parseUnits(formParams.price, 'ether');\n              _context3.next = 12;\n              return contract.getListPrice();\n\n            case 12:\n              listingPrice = _context3.sent;\n              listingPrice = listingPrice.toString(); //actually create the NFT\n\n              _context3.next = 16;\n              return contract.createToken(metadataURL, price, {\n                value: listingPrice\n              });\n\n            case 16:\n              transaction = _context3.sent;\n              _context3.next = 19;\n              return transaction.wait();\n\n            case 19:\n              alert(\"Successfully listed your NFT!\");\n              updateMessage(\"\");\n              updateFormParams({\n                name: '',\n                description: '',\n                price: ''\n              });\n              window.location.replace(\"/\");\n              _context3.next = 28;\n              break;\n\n            case 25:\n              _context3.prev = 25;\n              _context3.t0 = _context3[\"catch\"](1);\n              alert(\"Upload error\" + _context3.t0);\n\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 25]]);\n    }));\n    return _listNFT.apply(this, arguments);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"flex flex-col place-items-center mt-10\",\n    id: \"nftForm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"text-center font-bold text-purple-500 mb-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Upload your NFT to the marketplace\"), React.createElement(\"div\", {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"NFT Name\"), React.createElement(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Axie#4563\",\n    onChange: function onChange(e) {\n      return updateFormParams(_objectSpread({}, formParams, {\n        name: e.target.value\n      }));\n    },\n    value: formParams.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"mb-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"NFT Description\"), React.createElement(\"textarea\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    cols: \"40\",\n    rows: \"5\",\n    id: \"description\",\n    type: \"text\",\n    placeholder: \"Axie Infinity Collection\",\n    value: formParams.description,\n    onChange: function onChange(e) {\n      return updateFormParams(_objectSpread({}, formParams, {\n        description: e.target.value\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"mb-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Price (in ONE)\"), React.createElement(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    type: \"number\",\n    placeholder: \"Min 0.01 ETH\",\n    step: \"0.01\",\n    value: formParams.price,\n    onChange: function onChange(e) {\n      return updateFormParams(_objectSpread({}, formParams, {\n        price: e.target.value\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"block text-purple-500 text-sm font-bold mb-2\",\n    htmlFor: \"image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Upload Image\"), React.createElement(\"input\", {\n    type: \"file\",\n    onChange: OnChangeFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"text-green text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, message), React.createElement(\"button\", {\n    onClick: ListNFT,\n    className: \"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"List NFT\"))));\n}","map":{"version":3,"sources":["/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/SellNFT.js"],"names":["React","Component","Navbar","useState","uploadFileToIPFS","uploadJSONToIPFS","Marketplace","useLocation","SellNFT","name","description","price","formParams","updateFormParams","fileURL","setFileURL","ethers","require","message","updateMessage","location","OnChangeFile","e","file","target","files","response","success","console","log","pinataURL","uploadMetadataToIPFS","nftJSON","image","listNFT","preventDefault","metadataURL","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","utils","parseUnits","getListPrice","listingPrice","toString","createToken","value","transaction","wait","alert","replace","ListNFT"],"mappings":"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","sourcesContent":["import React, { Component }  from 'react';\nimport Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from '../Marketplace.json';\nimport { useLocation } from \"react-router\";\n\nexport default function SellNFT () {\n    const [formParams, updateFormParams] = useState({ name: '', description: '', price: ''});\n    const [fileURL, setFileURL] = useState(null);\n    const ethers = require(\"ethers\");\n    const [message, updateMessage] = useState('');\n    const location = useLocation();\n     \n    //This function uploads the NFT image to IPFS\n    async function OnChangeFile(e) {\n        var file = e.target.files[0];\n        //check for file extension\n        try {\n            //upload the file to IPFS\n            const response = await uploadFileToIPFS(file);\n            if(response.success === true) {\n                console.log(\"Uploaded image to Pinata: \", response.pinataURL)\n                setFileURL(response.pinataURL);\n            }\n        }\n        catch(e) {\n            console.log(\"Error during file upload\", e);\n        }\n    }\n\n    //This function uploads the metadata to IPDS\n    async function uploadMetadataToIPFS() {\n        const {name, description, price} = formParams;\n        //Make sure that none of the fields are empty\n        if( !name || !description || !price || !fileURL)\n            return;\n\n        const nftJSON = {\n            name, description, price, image: fileURL\n        }\n\n        try {\n            //upload the metadata JSON to IPFS\n            const response = await uploadJSONToIPFS(nftJSON);\n            if(response.success === true){\n                console.log(\"Uploaded JSON to Pinata: \", response)\n                return response.pinataURL;\n            }\n        }\n        catch(e) {\n            console.log(\"error uploading JSON metadata:\", e)\n        }\n    }\n\n    async function listNFT(e) {\n        e.preventDefault();\n\n        //Upload data to IPFS\n        try {\n            const metadataURL = await uploadMetadataToIPFS();\n            //After adding your Hardhat network to your metamask, this code will get providers and signers\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            updateMessage(\"Please wait.. uploading (upto 5 mins)\")\n\n            //Pull the deployed contract instance\n            let contract = new ethers.Contract(Marketplace.address, Marketplace.abi, signer)\n\n            //massage the params to be sent to the create NFT request\n            const price = ethers.utils.parseUnits(formParams.price, 'ether')\n            let listingPrice = await contract.getListPrice()\n            listingPrice = listingPrice.toString()\n\n            //actually create the NFT\n            let transaction = await contract.createToken(metadataURL, price, { value: listingPrice })\n            await transaction.wait()\n\n            alert(\"Successfully listed your NFT!\");\n            updateMessage(\"\");\n            updateFormParams({ name: '', description: '', price: ''});\n            window.location.replace(\"/\")\n        }\n        catch(e) {\n            alert( \"Upload error\"+e )\n        }\n    }\n\n    return (\n        <div className=\"\">\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-10\" id=\"nftForm\">\n            <form className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n            <h3 className=\"text-center font-bold text-purple-500 mb-8\">Upload your NFT to the marketplace</h3>\n                <div className=\"mb-4\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">NFT Name</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"name\" type=\"text\" placeholder=\"Axie#4563\" onChange={e => updateFormParams({...formParams, name: e.target.value})} value={formParams.name}></input>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"description\">NFT Description</label>\n                    <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" cols=\"40\" rows=\"5\" id=\"description\" type=\"text\" placeholder=\"Axie Infinity Collection\" value={formParams.description} onChange={e => updateFormParams({...formParams, description: e.target.value})}></textarea>\n                </div>\n                <div className=\"mb-6\">\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"price\">Price (in ONE)</label>\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"number\" placeholder=\"Min 0.01 ETH\" step=\"0.01\" value={formParams.price} onChange={e => updateFormParams({...formParams, price: e.target.value})}></input>\n                </div>\n                <div>\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"image\">Upload Image</label>\n                    <input type={\"file\"} onChange={OnChangeFile}></input>\n                </div>\n                <br></br>\n                <div className=\"text-green text-center\">{message}</div>\n                <button onClick={ListNFT} className=\"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\">\n                    List NFT\n                </button>\n            </form>\n        </div>\n        </div>\n    )\n}\n  \n  "]},"metadata":{},"sourceType":"module"}