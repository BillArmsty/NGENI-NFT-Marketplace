{"ast":null,"code":"import _regeneratorRuntime from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/Profile.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./Navbar\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\nexport default function Profile() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      updateData = _useState2[1];\n\n  co;\n\n  var _useState3 = useState(\"0x\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      address = _useState4[0],\n      updateAddress = _useState4[1];\n\n  var _useState5 = useState(\"0\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      totalPrice = _useState6[0],\n      updateTotalPrice = _useState6[1];\n\n  function getNFTData(_x) {\n    return _getNFTData.apply(this, arguments);\n  }\n\n  function _getNFTData() {\n    _getNFTData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenId) {\n      var ethers, sumPrice, provider, signer, addr, contract, transaction, items;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ethers = require(\"ethers\");\n              sumPrice = 0; //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n              provider = new ethers.providers.Web3Provider(window.ethereum);\n              signer = provider.getSigner();\n              _context2.next = 6;\n              return signer.getAddress();\n\n            case 6:\n              addr = _context2.sent;\n              //Pull the deployed contract instance\n              contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n              _context2.next = 10;\n              return contract.getMyNFTs();\n\n            case 10:\n              transaction = _context2.sent;\n              _context2.next = 13;\n              return Promise.all(transaction.map( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(i) {\n                  var tokenURI, meta, price, item;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return contract.tokenURI(i.tokenId);\n\n                        case 2:\n                          tokenURI = _context.sent;\n                          _context.next = 5;\n                          return axios.get(tokenURI);\n\n                        case 5:\n                          meta = _context.sent;\n                          meta = meta.data;\n                          price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n                          item = {\n                            price: price,\n                            tokenId: i.tokenId.toNumber(),\n                            seller: i.seller,\n                            owner: i.owner,\n                            image: meta.image,\n                            name: meta.name,\n                            description: meta.description\n                          };\n                          sumPrice += Number(price);\n                          return _context.abrupt(\"return\", item);\n\n                        case 11:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n\n            case 13:\n              items = _context2.sent;\n              updateData(items);\n              updateFetched(true);\n              updateAddress(addr);\n              updateTotalPrice(sumPrice.toPrecision(3));\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getNFTData.apply(this, arguments);\n  }\n\n  var params = useParams();\n  var tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  return React.createElement(\"div\", {\n    className: \"profileClass\",\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"profileClass\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"flex text-center flex-col mt-11 md:text-2xl text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"font-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Wallet Address\"), address)), React.createElement(\"div\", {\n    className: \"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"font-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"No. of NFTs\"), data.length), React.createElement(\"div\", {\n    className: \"ml-20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"font-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Total Value\"), totalPrice, \" ETH\")), React.createElement(\"div\", {\n    className: \"flex flex-col text-center items-center mt-11 text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"font-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Your NFTs\"), React.createElement(\"div\", {\n    className: \"flex justify-center flex-wrap max-w-screen-xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, data.map(function (value, index) {\n    return React.createElement(NFTTile, {\n      data: value,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"mt-10 text-xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\" : \"\"))));\n}\n;","map":{"version":3,"sources":["/home/armsty/Coding Projects/Harmony-Hackathon-Projects/NFT-Marketplace/src/components/Profile.js"],"names":["React","Component","Navbar","useLocation","useParams","MarketplaceJSON","axios","useState","NFTTile","Profile","data","updateData","co","address","updateAddress","totalPrice","updateTotalPrice","getNFTData","tokenId","ethers","require","sumPrice","provider","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","addr","contract","Contract","abi","getMyNFTs","transaction","Promise","all","map","i","tokenURI","get","meta","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","Number","items","updateFetched","toPrecision","params","dataFetched","length","value","index"],"mappings":"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","sourcesContent":["import React, { Component }  from 'react';\nimport Navbar from \"./Navbar\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\n\nexport default function Profile () {\n    const [data, updateData] = useState([]);\n    co\n    const [address, updateAddress] = useState(\"0x\");\n    const [totalPrice, updateTotalPrice] = useState(\"0\");\n\n    async function getNFTData(tokenId) {\n        const ethers = require(\"ethers\");\n        let sumPrice = 0;\n    \n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const addr = await signer.getAddress();\n    \n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    \n        //create an NFT Token\n        let transaction = await contract.getMyNFTs()\n    \n        /*\n        * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\n        * and creates an object of information that is to be displayed\n        */\n        \n        const items = await Promise.all(transaction.map(async i => {\n            const tokenURI = await contract.tokenURI(i.tokenId);\n            let meta = await axios.get(tokenURI);\n            meta = meta.data;\n    \n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n            let item = {\n                price,\n                tokenId: i.tokenId.toNumber(),\n                seller: i.seller,\n                owner: i.owner,\n                image: meta.image,\n                name: meta.name,\n                description: meta.description,\n            }\n            sumPrice += Number(price);\n            return item;\n        }))\n    \n        updateData(items);\n        updateFetched(true);\n        updateAddress(addr);\n        updateTotalPrice(sumPrice.toPrecision(3));\n    }\n    \n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n    \n    return (\n        <div className=\"profileClass\" style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"profileClass\">\n            <div className=\"flex text-center flex-col mt-11 md:text-2xl text-white\">\n                <div className=\"mb-5\">\n                    <h2 className=\"font-bold\">Wallet Address</h2>  \n                    {address}\n                </div>\n            </div>\n            <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\n                    <div>\n                        <h2 className=\"font-bold\">No. of NFTs</h2>\n                        {data.length}\n                    </div>\n                    <div className=\"ml-20\">\n                        <h2 className=\"font-bold\">Total Value</h2>\n                        {totalPrice} ETH\n                    </div>\n            </div>\n            <div className=\"flex flex-col text-center items-center mt-11 text-white\">\n                <h2 className=\"font-bold\">Your NFTs</h2>\n                <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\n                    {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                    })}\n                </div>\n                <div className=\"mt-10 text-xl\">\n                    {data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\":\"\"}\n                </div>\n            </div>\n            </div>\n        </div>\n    )\n}; \n\n\n"]},"metadata":{},"sourceType":"module"}